---
title: Handle Deferred Call Result
order: 9
layout: page
---

= Handle Deferred Call Result

When deferring an endpoint call, its result is only available after the actual submission over the network.

By default, Vaadin sends the deferred calls without prompting or notifying the user, and their returned result is not available in the caller view. However, often applications still need to handle deferred call results, for example, to notify the user of sending the data collected during prior offline work.

This article describes how to customize deferred call handling on the client side.

== The `deferredCallHandler` property

Vaadin has `deferredCallHandler` property on the `ConnectClient` TypeScript endpoint client class, which allows customizing the deferred call handling. 

The main philosophy for customization is to wrap the deferred call submission in a try-catch block, so that you can handle it correspondingly when a deferred call submission succeeds or fails.

By default, Vaadin will remove the deferred call from the queue when submitted successfully or if the submission error is handled already, for example, in a try-catch. To keep the deferred call in the queue, you can use the `deferredCallSubmitter` parameter received by the handler and call `deferredCallSubmitter.keepDeferredCallInTheQueue()` in the catch block.

To define a custom `deferredCallHandler` callback, import the client and set the property in your **`index.ts`** file as below. It is recommended to define the `deferredCallHandler` in the `index.ts` because if you put it in a sub view, the view component might not be available when the deferred call handling occurs.

[source,typescript]
.index.ts excerpt
----
import client from './generated/connect-client.default';
import { DeferredCallSubmitter } from '@vaadin/flow-frontend';

client.deferredCallHandler = {
	async handleDeferredCallSubmission(deferredCallSubmitter: DeferredCallSubmitter) {
		try {
			// Submit the deferred call and wait for it to finish
			await deferredCallSubmitter.submit();
			// Notify the user of successful result
			console.log('submission succeeded');
		} catch (error) {
			// Notify the user of the error
			console.log('submission failed');
			// The call will be removed from the deferred queue
			// when sent successfully or if the error is handled here.
			// To keep the call in the queue, call the 
			// keepDeferredCallInTheQueue() method.
			deferredCallSubmitter.keepDeferredCallInTheQueue();
		}
	}
}

// Send the deferred calls when application is opened in the browser. When
// the `deferredCallHandler` is used, make sure it is defined before this.
if (navigator.onLine) {
  client.submitDeferredCalls();
}
----

[NOTE]
====
If your application uses a custom client, the import path is different:
[source,typescript]
----
import client from './connect-client';
----
====

You can also give the callback as a `ConnectClient` constructor option, if you use a custom client:

[source,typescript]
.connect-client.ts
----
import { ConnectClient, DeferredCallSubmitter } from "@vaadin/flow-frontend";

export const client = new ConnectClient({
  deferredCallHandler: {
    async handleDeferredCallSubmission(deferredCallSubmitter: DeferredCallSubmitter) {
      try {
        // Submit the deferred call and wait for it to finish
        await deferredCallSubmitter.submit();
        // Notify the user of successful result
        console.log('submission succeeded');
      } catch (error) {
        // Notify the user of the error
        console.log('submission failed');
        // The call will be removed from the deferred queue
        // when sent successfully or if the error is handled here.
        // To keep the call in the queue, call the 
        // keepDeferredCallInTheQueue() method.
        deferredCallSubmitter.keepDeferredCallInTheQueue();
      }
    }
  }
});
----

== Handling deferred calls upon application load

When the browser running the offline application comes back online, the client sends the deferred calls automatically.

However, if a user closes the application offline and later reopens online, there could be deferred calls in the queue, which are not sent yet.

The `client.submitDeferredCalls()` method sends all the deferred calls stored in the browser, if there are any. You may call it explicitly upon online application load.

In the example above, `client.submitDeferredCalls()` is called from `index.ts` to send the deferred calls from the queue if the user opens the application online:

[CAUTION]
====
If your application handles deferred calls on the client, call `client.submitDeferredCalls()` only after `deferredCallHandler` is defined. This is necessary to ensure that the custom callback applies to all the deferred requests.
====
