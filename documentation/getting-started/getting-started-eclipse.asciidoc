---
title: Starting a Vaadin Project in Eclipse
order: 100
layout: page
---

[[getting-started.eclipse]]
= Starting a Vaadin Project in Eclipse

:experimental:

In this article, we go through creating or importing a new Vaadin project in Eclipse, and running it.

With Eclipse, you can create a project:

* Externally, using an application wizard or a Maven archetype, and then importing it to Eclipse.
* Creating from a Maven archetype in Eclipse.
* Creating with the Vaadin Plugin for Eclipse.

ifdef::web[]
Maven is a project management tool that goes beyond dependency management.
See https://vaadin.com/learn/tutorials/learning-maven-concepts[Learning Maven Concepts] for more.
endif::web[]

[[getting-started.eclipse.importing]]
== Importing a Maven Project in the Eclipse IDE

. In Eclipse, select *"File > Import..."*
. In the *Import* window, select *"Maven > Existing Maven Projects"*, and click [guibutton]#Next#.
+
.Import window in the Eclipse IDE
image::images/eclipse/import-window.png[Import window]

. Click [guibutton]#Browse# and select the directory that contains the `pom.xml` file of the project you want to import:
+
image::images/eclipse/select-root-directory.png[Select the root directory]
+
NOTE: If you are importing a multi-module Maven project, make sure you select the correct project to import. You will typically want to select all the projects.

. Click [guibutton]#Finish#.
Eclipse will import the project and start downloading the required resources.

[[getting-started.eclipse.maven]]
== Building and Running the Project

The project is built with Maven, and you can also run it in an embedded development server with Maven.
The Eclipse IDE has built-in integration with Maven.
You can run common commands such as `mvn install` or `mvn jetty:run` without having to leave the IDE.

The most common commands are available in the *Run As* and *Debug As* folders when you right-click the project in *Project Explorer* view. For example, to run `mvn install`, right-click the project and select *"Run As > Maven install"*:

image::images/eclipse/maven-install.png[Maven install]

You can find additional useful options in the *Maven* submenu.

After starting the command, you will see how Eclipse executes the `install` https://vaadin.com/learn/tutorials/learning-maven-concepts#_what_is_a_build_phase[build phase] (and all the previous phases in the Maven's default https://vaadin.com/learn/tutorials/learning-maven-concepts#_what_is_a_build_lifecycle[lifecycle]) that downloads dependencies from the https://vaadin.com/learn/tutorials/learning-maven-concepts#_what_is_a_repository[repositories] and copies the generated https://vaadin.com/learn/tutorials/learning-maven-concepts#_what_is_an_artifact[artifacts] into your local Maven repository among other things.

== Creating a Run Configuration

A _run configuration_ is a _shortcut_ to run a task in Eclipse, in this case a Maven goal.

You can create a run configuration to run the web application as follows:

. Right-click the project in the *Project Explorer* view and select *"Run As > Maven build"*.

. In the *Edit Configuration* window, for *Goals* enter the goals to run.
+
[cols=3*,options=header]
|===
| Technology Stack | Embedded Server | Goal to Run
| Spring Boot | â€“ | `spring-boot:run`
| CDI / Java EE | Apache TomEE | `tomee:run`
| Plain Java | Jetty | `jetty:run`
|===
+
Optionally, you can give the run configuration a new name.
+
image::images/eclipse/jetty-run.png[jetty:run configuration]

. Click [guibutton]#Run# to save the new configuration and execute it.
You should see the *Console* view with the log generated by the application and the server.

. You can now open the web application in a browser at http://localhost:8080/.

. If you modify and save any of the project Java source files, they will be compiled and the server will redeploy the application, so you should see the modified behaviour by reloading the page.

. To stop the server, click the *Terminate* icon in the *Console* view:
+
image::images/eclipse/terminate.png[Terminate]

You can deploy and run the web application by clicking the *Run* (or *Debug*) icon in the toolbar and selecting the corresponding run or debug configuration:

image::images/eclipse/toolbar.png[Toolbar]

You can now use the Eclipse IDE to develop your Maven application.
