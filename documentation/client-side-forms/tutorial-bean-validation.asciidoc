---
title: Bean Validation
order: 3
layout: page
---

= Using JSR 380 Bean Validation

If you have JSR 380 Bean Validation annotations such as `Max`, `Min`, `Size`, etc. in your entity, Vaadin will automatically add corresponding client-side validators to the
generated model.

=== Defining Constraints for Properties

*Example*: Using JSR 380 Bean Validation annotations

[source, java]
----
public class Person {
    @Max(2000)
    private int yearOfBirth;

    @NotEmpty
    private String name;

    // + other fields, constructors, setters and getters
}
----

So if you bind your form to the model like below, the form will have the validations automatically.

*Example*: Binding form to the model

[source, HTML]
----
<vaadin-text-field ...="${field(this.binder.model.name)}">
</vaadin-text-field>

<vaadin-number-field ...="${field(this.binder.model.yearOfBirth)}">
</vaadin-number-field>
----

image:images/bean-validation-errors.png[The validation errors]

[NOTE]
Currently Vaadin only support assigning JSR 380 validations to properties.

=== Automatically Marking Form Fields as Required

Some built-in validators `@NotNull`, `@NotEmpty` and `@Size` (if `min()` value is greater than 0) configures the field as required, i.e. automatically enables the visual "required" indicator.
